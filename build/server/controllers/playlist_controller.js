// Generated by CoffeeScript 1.9.3
var Playlist, Track, async;

Playlist = require('../models/playlists_model');

Track = require('../models/track_model');

async = require('async');

module.exports.all = function(req, res, next) {
  return Playlist.all(function(err, playlists) {
    if (err) {
      return next(err);
    }
    return res.status(200).send(playlists);
  });
};

module.exports.create = function(req, res, next) {
  return Playlist.create(req.body, function(err, playlist) {
    if (err) {
      return next(err);
    }
    return res.status(201).send(playlist);
  });
};

module.exports["delete"] = function(req, res, next) {
  return Playlist.find(req.params.id, function(err, playlist) {
    var i, len, ref, trackId;
    if (err) {
      return next(err);
    }
    if (playlist == null) {
      return res.status(204);
    }
    ref = playlist.trackId;
    for (i = 0, len = ref.length; i < len; i++) {
      trackId = ref[i];
      Track.find(trackId, function(err, track) {
        var id, index, j, len1, ref1, results;
        if (err) {
          return next(err);
        }
        if (track) {
          ref1 = track.playlistId;
          results = [];
          for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
            id = ref1[index];
            if (id === playlist.id) {
              track.playlistId.splice(index, index + 1);
              results.push(track.updateAttributes(track, function(err) {
                if (err) {
                  return next(err);
                }
              }));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      });
    }
    return playlist.destroy(function(err) {
      if (err) {
        return next(err);
      }
      return res.status(200).send({
        success: "Playlist successfuly removed"
      });
    });
  });
};

module.exports.add = function(req, res, next) {
  return async.parallel([
    function(cb) {
      return Playlist.find(req.params.playlistId, function(err, playlist) {
        if (err) {
          return next(err);
        }
        if (playlist == null) {
          return res.status(204);
        }
        playlist.trackId = req.body.newListTrackId;
        playlist.size = playlist.size + 1;
        playlist.lastModified = Date.now;
        return playlist.updateAttributes(playlist, function(err) {
          if (err) {
            return next(err);
          }
          return cb;
        });
      });
    }, function(cb) {
      var i, id, len, ref, results;
      ref = req.body.listNewId;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        id = ref[i];
        results.push(Track.find(id, function(err, track) {
          if (err) {
            return next(err);
          }
          if (track == null) {
            return res.status(204);
          }
          track.playlistId.push(req.params.playlistId);
          track.lastModified = Date.now;
          track.updateAttributes(track, function(err) {});
          if (err) {
            return next(err);
          }
          return cb;
        }));
      }
      return results;
    }
  ], function(err, result) {
    if (err) {
      return next(err);
    }
    return res.status(201);
  });
};

module.exports.get = function(req, res, next) {
  return Playlist.find(req.params.id, function(err, playlist) {
    if (err) {
      return next(err);
    }
    return res.status(200).send(playlist);
  });
};
